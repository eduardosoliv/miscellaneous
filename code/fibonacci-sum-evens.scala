/**
 * Project Euler.net
 * Even Fibonacci numbers
 * Problem 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

import scala.language.implicitConversions
import scala.language.postfixOps

object Fibonacci {

  class asInt(b: Boolean) {
    def toInt = if(b) 1 else 0
  }
  implicit def convertBooleanToInt(b: Boolean) = new asInt(b)

  def main(args: Array[String]) {
    println(sumEvens())
  }

  def sumEvens(lastNum: Int = 0, num: Int = 1, max: Int = 4000000): Int = {
    if (num > max)
      return 0
    
    val newNum = lastNum + num
    return ((newNum % 2 == 0) toInt) * newNum + 
      sumEvens(num, newNum)
  }
}

